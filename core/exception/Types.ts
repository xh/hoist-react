/*
 * This file belongs to Hoist, an application development toolkit
 * developed by Extremely Heavy Industries (www.xh.io | info@xh.io)
 *
 * Copyright Â© 2023 Extremely Heavy Industries Inc.
 */
import {PlainObject} from '@xh/hoist/core';
import {FetchOptions} from '@xh/hoist/svc';

/**
 * A Hoist optimized Javascript Error object.
 */
export interface HoistException extends Error {
    isHoistException: true;

    /**
     * Is the exception an expected, normal behavior of the app?
     *
     * Set to true for exceptions that should not be treated or logged as technical 'errors'.
     * (e.g. validation errors, permission errors, time-of-day errors).  Default false.
     */
    isRoutine: boolean;

    [x: string]: any;
}

/**
 * Exception thrown to indicate a timeout.
 *
 * Typically generated by the `Promise.timeout()` extension or calls to FetchService.
 */
export interface TimeoutException extends HoistException {
    isTimeout: true;

    /** Time in Milliseconds that was waited before exception was thrown.  */
    interval: number;
}

/**
 * Exception thrown to indicate an HTTP error resulting from a call to FetchService.
 */
export interface FetchException extends HoistException {
    /** Http Status code associated with exception. 0 if no response received. */
    httpStatus: number;

    /** Rich object or string containing details about the exception as sent by server. */
    serverDetails: string | PlainObject;

    /** Options of underlying fetch call. */
    fetchOptions: FetchOptions;

    /**
     * True if exception resulted from the fetch being aborted by fetchService, or the application.
     * @see FetchService.abort and FetchOptions.autoAbortKey.
     */
    isFetchAborted: boolean;
}

/**
 * Configuration for generating a timeout exception.
 *
 * @internal
 */
export interface TimeoutExceptionConfig extends PlainObject {
    interval: number;
}
