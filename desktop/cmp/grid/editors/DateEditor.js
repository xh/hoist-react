/*
 * This file belongs to Hoist, an application development toolkit
 * developed by Extremely Heavy Industries (www.xh.io | info@xh.io)
 *
 * Copyright Â© 2021 Extremely Heavy Industries Inc.
 */
import {hoistCmp} from '@xh/hoist/core';
import {dateInput} from '@xh/hoist/desktop/cmp/input';
import {getBoundingClientRect, getOffsetParent, getPopperOffsets, getOffsetRectRelativeToArbitraryNode}  from 'popper.js/dist/popper-utils';
import {warnIf} from '@xh/hoist/utils/js';
import {useInlineEditorModel} from './impl/InlineEditorModel';
import {EditorPropTypes} from './EditorPropTypes';
import './Editors.scss';

export const [DateEditor, dateEditor] = hoistCmp.withFactory({
    displayName: 'DateEditor',
    className: 'xh-date-editor',
    model: false,
    memo: false,
    observer: false,
    render(props, ref) {
        // We need to render the day picker popover inside the grid viewport in order for
        // `stopEditingWhenCellsLoseFocus` to work properly - otherwise the day picker becomes
        // unusable due to the grid losing focus and stopping editing when clicking inside picker
        const portalContainer = props.gridModel.agApi.gridBodyComp?.eBodyViewport;
        console.log(props.gridModel.agApi.gridBodyComp?.eBodyViewport);
        console.log(props.gridModel.agApi, props.gridModel.agApi.gridBodyComp);
        warnIf(
            !portalContainer,
            'Could not find the grid body viewport for rendering DateEditor picker popover.'
        );

        props = {
            ...props,
            inputProps: {
                rightElement: null,

                enablePicker: !!portalContainer,
                showPickerOnFocus: !!portalContainer,
                portalContainer,
                popoverBoundary: 'scrollParent',
                // popoverBoundary: props.gridModel.agApi.gridBodyComp?.eBodyViewport, // props.gridModel.agApi.gridBodyComp.getFocusableElement(),//portalContainer.children[1],
                // see https://github.com/palantir/blueprint/blob/d3b72d4d81efa89724567a907b879d0b428c080d/packages/core/src/components/popover/popover.tsx
                // for example of blueprintjs modifiers
                popoverMofifiers: {
                    computeStyle: {
                        enabled: true,
                        fn: computeStyleInAgGrid,
                        order: 850
                    }
                },
                ...props.inputProps
            }
        };
        return useInlineEditorModel(dateInput, props, ref);
    }
});
DateEditor.propTypes = {
    ...EditorPropTypes
};

/**
 * @function
 * @memberof Modifiers
 * @argument {Object} data - The data object generated by `update` method
 * @argument {Object} options - Modifiers configuration and options
 * @returns {Object} The data object, properly modified
 */
function computeStyleInAgGrid(data, options) {
    const {x, y} = options,
        sideA = x === 'bottom' ? 'top' : 'bottom',
        sideB = y === 'right' ? 'left' : 'right',
        styles = {position: data.offsets.popper.position},
        offsetParent = getOffsetParent(data.instance.popper),
        offsetParentRect = getBoundingClientRect(offsetParent);

    // 1: recalc reference offsets with ag-grid container
    data.offsets.reference = getReferenceOffset(data.instance.reference);
    // 2: must recalc popper offets with new reference offsets
    data.offsets.popper =  getPopperOffsets(data.instance.popper, data.offsets.reference, data.placement);

    const {top, right, bottom, left} = data.offsets.popper;

    let trLeft = void 0,
        trTop = void 0;
    if (sideA === 'bottom') {
        trTop = -offsetParentRect.height + bottom;
    } else {
        trTop = top;
    }
    if (sideB === 'right') {
        trLeft = -offsetParentRect.width + right;
    } else {
        trLeft = left;
    }

    styles.transform = 'translate3d(' + trLeft + 'px, ' + trTop + 'px, 0)';
    styles[sideA] = 0;
    styles[sideB] = 0;
    styles.willChange = 'transform';

    const attributes = {
        'x-placement': data.placement
    };

    data.attributes = Object.assign({}, attributes, data.attributes);
    data.styles = Object.assign({}, styles, data.styles);
    data.arrowStyles = Object.assign({}, data.offsets.arrow, data.arrowStyles);

    return data;
}

// Customized to get offset of container of all rows.
function getReferenceOffset(reference) {
    const parent = reference.closest('[ref=eViewport]');
    return getOffsetRectRelativeToArbitraryNode(reference, parent, false);
}
  